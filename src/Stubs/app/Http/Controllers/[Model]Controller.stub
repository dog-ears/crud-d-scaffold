<?php

namespace App\Http\Controllers;

use App\Http\Requests;
use App\Http\Controllers\Controller;

use App\{{{ $name|NameName }}};
use Illuminate\Http\Request;

class {{{ $name|NameName }}}Controller extends Controller
{
    /**
     * Varidate input data.
     *
     * @return array
     */
    public function varidate(Request $request, {{{ $name|NameName }}} ${{{ $name|name_name }}} = null)
    {
        $request->validate([
{{{ foreach($schemas): }}}{{{ if($this.varidate!=''): }}}
            '{{{ $this.name|name_name }}}' => {{{ $this.varidate }}},
{{{ endif; }}}{{{ endforeach; }}}
{{{ foreach($belongstomany): }}}{{{ foreach($this.schemas): }}}
            'pivots.{{{ $parent.name|name_name }}}.*.{{{ $this.name|name_name }}}' => {{{ $this.varidate }}},
{{{ endforeach; }}}{{{ endforeach; }}}
        ]);
    }



    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
		${{{ $name|nameNames }}} = {{{ $name|NameName }}}::getAllData($request)->paginate(10);

		return view('{{{ $name|nameNames }}}.index', compact('{{{ $name|nameNames }}}'));
    }



    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
		return view('{{{ $name|nameNames }}}.create')
			->with( 'list', {{{ $name|NameName }}}::getListFromAllRelationApps() );
    }



    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->varidate($request);

        $input = $request->all();

{{{ if($name==user): }}}
        // only user model
        $input['password'] = bcrypt($input['password']);
{{{ endif; }}}

{{{ if($belongstomany!=[]): }}}
        //remove data for manytomany relation
        if( array_key_exists('pivots',$input) ){ unset($input['pivots']); }
{{{ endif; }}}

		//create data
		${{{ $name|name_name }}} = {{{ $name|NameName }}}::create( $input );

{{{ if($belongstomany!=[]): }}}
        //sync(attach/detach)
        if($request->input('pivots')){
            foreach( $request->input('pivots') as $pivot_child_model_name => $pivots ){

                // remove 'id'
                foreach($pivots as &$value){
                    if( array_key_exists('id', $value) ){
                        unset($value['id']);
                    }
                }unset($value);

                $method = camel_case( str_plural($pivot_child_model_name) );
                ${{{ $name|name_name }}}->$method()->sync($pivots);
            }
        }
{{{ endif; }}}

		return redirect()->route('{{{ $name|nameNames }}}.index')->with('message', 'Item created successfully.');
    }



    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show({{{ $name|NameName }}} ${{{ $name|nameName }}})
    {
		return view('{{{ $name|nameNames }}}.show', compact('{{{ $name|nameName }}}'));
    }



    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit({{{ $name|NameName }}} ${{{ $name|nameName }}})
    {
		return view('{{{ $name|nameNames }}}.edit', compact('{{{ $name|nameName }}}'))
			->with( 'list', {{{ $name|NameName }}}::getListFromAllRelationApps() );
    }



	/**
	 * Show the form for duplicatting the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function duplicate({{{ $name|NameName }}} ${{{ $name|nameName }}})
	{
		return view('{{{ $name|nameNames }}}.duplicate', compact('{{{ $name|nameName }}}'))
			->with( 'list', {{{ $name|NameName }}}::getListFromAllRelationApps() );
	}



    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update({{{ $name|NameName }}} ${{{ $name|nameName }}}, Request $request)
    {
        $this->varidate($request, ${{{ $name|nameName }}});

        $input = $request->all();

{{{ if($name==user): }}}
        // only user model
        if( $input['password'] === '' ){
            $input['password'] = $user->password;
        }else{
            $input['password'] = bcrypt($input['password']);
        }
{{{ endif; }}}

{{{ if($belongstomany!=false): }}}
        //remove data for manytomany relation
        if( array_key_exists('pivots',$input) ){ unset($input['pivots']); }
{{{ endif; }}}

		//update data
		${{{ $name|nameName }}}->update($input);

{{{ if($belongstomany!=[]): }}}
        //sync(attach/detach)
        if($request->input('pivots')){
            foreach( $request->input('pivots') as $pivot_child_model_name => $pivots ){

                // remove 'id'
                foreach($pivots as &$value){
                    if( array_key_exists('id', $value) ){
                        unset($value['id']);
                    }
                }unset($value);

                $method = camel_case( str_plural($pivot_child_model_name) );
                ${{{ $name|nameName }}}->$method()->sync($pivots);
            }
        }
{{{ endif; }}}

		return redirect()->route('{{{ $name|nameNames }}}.index')->with('message', 'Item updated successfully.');
    }



    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy({{{ $name|NameName }}} ${{{ $name|nameName }}})
    {
		${{{ $name|nameName }}}->delete();

		return redirect()->route('{{{ $name|nameNames }}}.index')->with('message', 'Item deleted successfully.');
    }
}
