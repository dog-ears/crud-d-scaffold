<?php
namespace dogears\L5scaffold\Makes;

use Illuminate\Filesystem\Filesystem;
use dogears\L5scaffold\Commands\ScaffoldMakeCommand;
use dogears\L5scaffold\Migrations\SchemaParser;
use dogears\L5scaffold\Migrations\SyntaxBuilder;

class MakeSeed
{
    use MakerTrait;

    public function __construct(ScaffoldMakeCommand $scaffoldCommand, Filesystem $files)
    {
        $this->files = $files;
        $this->scaffoldCommandObj = $scaffoldCommand;

        $this->start();
    }


    protected function start()
    {

        $flag_seeding = $this->scaffoldCommandObj->option('seeding');
        $this->scaffoldCommandObj->info('--Create Seeding');


        if( $flag_seeding ){

            //generate factory

            //getPath
            $factory_path = $this->getPath('ModelFactory', 'factories');

            //append compiled stub
            $this->files->append($factory_path, $this->compileFactoryStub());            

            //edit DatabaseSeeder
            $databaseSeeder_path = $this->getPath('DatabaseSeeder', 'seed');

            //get compiled stub
            $data = $this->files->get($databaseSeeder_path);
            $data = preg_replace('/}\n}/',"    \$this->call(". $this->scaffoldCommandObj->solveName('NameNames'). "TableSeeder::class);//generated by scaffold - ".$this->scaffoldCommandObj->getNameConfig('model_name')."\n    }\n}",$data);
            $this->files->put($databaseSeeder_path, $data);
        }

        // Get path
        $path = $this->getPath($this->scaffoldCommandObj->getNameConfig('seeder_name'). 'TableSeeder', 'seed');

        // Create directory
        $this->makeDirectory($path);

        if ($this->files->exists($path)) {
            if ($this->scaffoldCommandObj->confirm($path . ' already exists! Do you wish to overwrite? [yes|no]')) {
                // Put file
                $this->files->put($path, $this->compileSeedStub());
                $this->getSuccessMsg();
            }
        } else {

            // Put file
            $this->files->put($path, $this->compileSeedStub());
            $this->getSuccessMsg();

        }

    }


    protected function getSuccessMsg()
    {
        $this->scaffoldCommandObj->info('Seed created successfully.');
    }


    /**
     * Compile the migration stub.
     *
     * @return string
     */
    protected function compileSeedStub()
    {
        $stub = $this->files->get(__DIR__ . '/../stubs/seed.stub');

        $this->replaceClassName($stub);
        $this->replaceModelName($stub);

        return $stub;
    }


    private function replaceClassName(&$stub)
    {
        $name = $this->scaffoldCommandObj->getNameConfig('seeder_name');

        $stub = str_replace('{{class}}', $name, $stub);

        return $this;
    }
    private function replaceModelName(&$stub)
    {
        $name = $this->scaffoldCommandObj->getNameConfig('model_name');

        $stub = str_replace('{{model_name}}', $name, $stub);

        return $this;
    }


    protected function compileFactoryStub()
    {
        $stub = $this->files->get(__DIR__ . '/../stubs/factory.stub');

        //{{model_name}}
        $this->replaceModelName($stub);

        //{{factory_schema}}
        if ($schema = $this->scaffoldCommandObj->option('schema')) {
            $schema = (new SchemaParser)->parse($schema);
        }
        $schema = (new SyntaxBuilder)->create($schema, $this->scaffoldCommandObj->getMeta(), 'factory');
        $stub = str_replace('{{factory_schema}}', $schema, $stub);

        return $stub;
    }

}